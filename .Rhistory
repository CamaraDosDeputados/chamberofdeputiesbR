}
# Teste
df_proposicoes_votacoes <- extrair_proposicoes_votacoes(id = "18156")
View(df_proposicoes_votacoes)
View(df_proposicoes_votacoes)
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_votacoes_id <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/votacoes",
id = NULL) {
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id)
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- fromJSON(url_endpoint, flatten = TRUE)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <-  purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(dplyr::bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_votacoes_id <- extrair_votacoes_id(id = "994689-78")
View(df_votacoes_id)
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_votacoes_orientacoes <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/votacoes",
id) {
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "orientacoes")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(dplyr::bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_votacoes_orientacoes <- extrair_votacoes_orientacoes(id = "994689-78")
View(df_votacoes_orientacoes)
library(jsonlite)
library(data.table)
extrair_votacoes_votos <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/votacoes",
id) {
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "votos")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- lapply(dados, function(x) if (is.null(x)) NA else x)
# Converte os dados em um data.frame
dados <- as.data.frame(dados)
return(dados)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_votacoes_votos <- extrair_votacoes_votos(id = "994689-78")
View(df_votacoes_votos)
detach("data.table", unload = TRUE)
detach("data_table", unload = TRUE)
detach("data_table", unload = TRUE)
detach(data_table, unload = TRUE)
detach("package:data_table", unload = TRUE)
detach("package:data.table", unload = TRUE)
library(jsonlite)
extrair_votacoes_votos <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/votacoes",
id) {
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "votos")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- lapply(dados, function(x) if (is.null(x)) NA else x)
# Converte os dados em um data.frame
dados <- as.data.frame(dados)
return(dados)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
df_votacoes_votos <- extrair_votacoes_votos(id = "994689-78")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
R CMD Rd2pdf --help
Rd2pdf --help
Rd2dvi
Rd2dvi --pdf --title='chamberofdeputiesbR' -o man/chamberofdeputiesbR.pdf man/*.Rd
Rd2dvi
Rd2pdf
help("Rd2pdf")
Rd2pdf("/man/extrair_votacoes.Rd")
roxygen2::roxygenise()
roxygen2::roxygenise()
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_proposicoes_id <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/proposicoes",
id = NULL) {
# Cria uma lista de parâmetros da query
query_params <- list(id = id)
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id)
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- jsonlite::fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_proposicoes_id <- extrair_proposicoes_id(id = "18157")
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_proposicoes_autores <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/proposicoes",
id = NULL) {
# Cria uma lista de parâmetros da query
query_params <- list(
id = id
)
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "autores")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- jsonlite::fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_proposicoes_autores <- extrair_proposicoes_autores(id = "18156")
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_proposicoes_relacionadas <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/proposicoes",
id = NULL) {
# Cria uma lista de parâmetros da query
query_params <- list(
id = id
)
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "relacionadas")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- jsonlite::fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_proposicoes_relacionadas <- extrair_proposicoes_relacionadas(id = "18156")
View(df_proposicoes_relacionadas)
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_proposicoes_temas <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/proposicoes",
id = NULL) {
# Cria uma lista de parâmetros da query
query_params <- list(
id = id
)
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "temas")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- jsonlite::fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(dplyr::bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_proposicoes_temas <- extrair_proposicoes_temas(id = "18156")
View(df_proposicoes_temas)
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_proposicoes_temas <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/proposicoes",
id = NULL) {
# Cria uma lista de parâmetros da query
query_params <- list(
id = id
)
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "temas")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- jsonlite::fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(dplyr::bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_proposicoes_temas <- extrair_proposicoes_temas(id = "18156")
View(df_proposicoes_temas)
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_proposicoes_tramitacoes <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/proposicoes",
id = NULL) {
# Cria uma lista de parâmetros da query
query_params <- list(
id = id
)
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "tramitacoes")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- jsonlite::fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(dplyr::bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_proposicoes_tramitacoes <- extrair_proposicoes_tramitacoes(id = "18156")
View(df_proposicoes_tramitacoes)
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_proposicoes_votacoes <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/proposicoes",
dataHoraRegistro = NULL,
id = NULL,
ordem = "desc",
ordenarPor = "dataHoraRegistro") {
# Cria uma lista de parâmetros da query
query_params <- list(
dataHoraRegistro = dataHoraRegistro,
id = id,
ordem = ordem,
ordenarPor = ordenarPor
)
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "votacoes")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- jsonlite::fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(dplyr::bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_proposicoes_votacoes <- extrair_proposicoes_votacoes(id = "18156")
View(df_proposicoes_votacoes)
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_votacoes_id <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/votacoes",
id = NULL) {
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id)
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- fromJSON(url_endpoint, flatten = TRUE)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <-  purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(dplyr::bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_votacoes_id <- extrair_votacoes_id(id = "994689-78")
View(df_votacoes_id)
library(jsonlite)
library(purrr)
library(dplyr)
library(tibble)
extrair_votacoes_orientacoes <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/votacoes",
id) {
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "orientacoes")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- purrr::map(dados, ~ modify_if(.x, is.null, ~ NA))
# Converte a lista de listas em um data.frame
dados_df <- tibble::as_tibble(dplyr::bind_rows(dados))
return(dados_df)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_votacoes_orientacoes <- extrair_votacoes_orientacoes(id = "994689-78")
View(df_votacoes_orientacoes)
library(jsonlite)
extrair_votacoes_votos <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/votacoes",
id) {
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, "/", id, "/", "votos")
tryCatch({
# Faz a requisição inicial à API e extrai os dados
doc_json <- fromJSON(url_endpoint)
dados <- doc_json$dados
# Verifica e substitui colunas que são NULL por NA
dados <- lapply(dados, function(x) if (is.null(x)) NA else x)
# Converte os dados em um data.frame
dados <- as.data.frame(dados)
return(dados)
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
df_votacoes_votos <- extrair_votacoes_votos(id = "994689-78")
library(jsonlite)
library(tibble)
library(dplyr)
library(stringr)
library(purrr)
extrair_votacoes <- function(
url_base = "https://dadosabertos.camara.leg.br/api/v2/votacoes",
id = NULL,
idProposicao = NULL,
idOrgao = NULL,
dataInicio = NULL,
dataFim = NULL,
ordenarPor = "id",
ordem = "desc",
itens = 1000) {
# Cria uma lista de parâmetros da consulta
query_params <- list(
id = id,
idProposicao = idProposicao,
idOrgao = idOrgao,
dataInicio = dataInicio,
dataFim = dataFim,
ordenarPor = ordenarPor,
ordem = ordem,
itens = itens
)
# Remove os parâmetros que são NULL
query_params <- query_params[!sapply(query_params, is.null)]
# Constrói a string da query
query_string <- paste0("?", paste0(names(query_params), "=", query_params, collapse = "&"))
# Constrói a URL final do endpoint
url_endpoint <- paste0(url_base, query_string)
tryCatch({
# Faz a requisição inicial à API
doc <- jsonlite::fromJSON(url_endpoint)
# Verifica se há links de paginação
if (!is.null(doc$links)) {
links <- doc$links
last_link <- as.character(links[links$rel == "last", ]$href)
# Determina o número de páginas
n_paginas <- as.numeric(substr(last_link,
str_locate(last_link, "pagina=")[2] + 1,
str_locate(last_link, "&itens")[1] - 1))
# Itera sobre as páginas e junta os resultados usando map_dfr
dados <- map_dfr(1:n_paginas, function(pagina) {
url_endpoint_pag <- paste0(url_endpoint, "&pagina=", pagina)
doc_pag <- jsonlite::fromJSON(url_endpoint_pag)
return(doc_pag$dados)
})
} else {
# Se não houver paginação, retorna os dados diretamente
dados <- doc$dados
}
# Retorna os dados como um tibble
return(tibble::as_tibble(dados))
}, error = function(e) {
# Em caso de erro, exibe a mensagem de erro
message("Falha ao acessar a API: ", e$message)
return(NULL)
})
}
# Teste
df_votacoes <- extrair_votacoes(dataInicio = "2024-06-22")
# Teste
df_votacoes <- extrair_votacoes(dataInicio = "2024-06-30")
View(df_votacoes)
roxygen2::roxygenise()
help(extrair_blocod_id)
??extrair_blocos_id
??extrair_blocos_id()
Sys.getlocale()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("roxygen2")
roxygen2::roxygenise()
Sys.getlocale()
roxygen2::roxygenise()
locale -a
Sys.setlocale("LC_ALL", "pt_br.utf-8")
Sys.setlocale("LC_ALL", "pt_br.utf-8")
Sys.getlocale()
options(encoding = "UTF-8")
roxygen2::roxygenise()
options(encoding = "UTF-8")
Sys.getlocale()
install.packages("roxygen2")
roxygen2::roxygenise()
options(encoding = "UTF-8")
roxygen2::roxygenise()
roxygen2::roxygenise()
options(encoding = "UTF-8")
options(encoding = "UTF-8")
